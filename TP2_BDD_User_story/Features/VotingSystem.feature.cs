// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TP2_BDD_User_story.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("VotingSystem")]
    public partial class VotingSystemFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "VotingSystem.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "VotingSystem", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A candidate exceeds 50% on first round")]
        public virtual void ACandidateExceeds50OnFirstRound()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A candidate exceeds 50% on first round", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("a ballot starts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidate",
                            "Votes"});
                table1.AddRow(new string[] {
                            "Alice",
                            "60"});
                table1.AddRow(new string[] {
                            "Bob",
                            "30"});
                table1.AddRow(new string[] {
                            "Charlie",
                            "10"});
#line 7
 testRunner.And("the votes are :", ((string)(null)), table1, "And ");
#line hidden
#line 12
    testRunner.Then("the ballot is on first round", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 13
    testRunner.Given("the ballot has ended", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 14
 testRunner.When("we calculate the ballot results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
 testRunner.Then("the winner is Alice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidate",
                            "Votes",
                            "Percentage"});
                table2.AddRow(new string[] {
                            "Alice",
                            "60",
                            "60"});
                table2.AddRow(new string[] {
                            "Bob",
                            "30",
                            "30"});
                table2.AddRow(new string[] {
                            "Charlie",
                            "10",
                            "10"});
#line 16
 testRunner.And("the results are :", ((string)(null)), table2, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A candidate exceeds 50% on first round (with blank votes)")]
        public virtual void ACandidateExceeds50OnFirstRoundWithBlankVotes()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A candidate exceeds 50% on first round (with blank votes)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 23
 testRunner.Given("a ballot starts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidate",
                            "Votes"});
                table3.AddRow(new string[] {
                            "Alice",
                            "55"});
                table3.AddRow(new string[] {
                            "Bob",
                            "25"});
                table3.AddRow(new string[] {
                            "Charlie",
                            "5"});
#line 24
 testRunner.And("the votes are :", ((string)(null)), table3, "And ");
#line hidden
#line 29
    testRunner.And("15 blank votes are submitted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
 testRunner.Then("the ballot is on first round", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 31
 testRunner.Given("the ballot has ended", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 32
 testRunner.When("we calculate the ballot results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
 testRunner.Then("the winner is Alice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidate",
                            "Votes",
                            "Percentage"});
                table4.AddRow(new string[] {
                            "Alice",
                            "55",
                            "55"});
                table4.AddRow(new string[] {
                            "Bob",
                            "25",
                            "25"});
                table4.AddRow(new string[] {
                            "Charlie",
                            "5",
                            "5"});
                table4.AddRow(new string[] {
                            "Blank",
                            "15",
                            "15"});
#line 34
 testRunner.And("the results are :", ((string)(null)), table4, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Trying to get results before closing the ballot")]
        public virtual void TryingToGetResultsBeforeClosingTheBallot()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Trying to get results before closing the ballot", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 42
 testRunner.Given("a ballot starts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidate",
                            "Votes"});
                table5.AddRow(new string[] {
                            "Alice",
                            "45"});
                table5.AddRow(new string[] {
                            "Bob",
                            "30"});
                table5.AddRow(new string[] {
                            "Charlie",
                            "10"});
#line 43
 testRunner.And("the votes are :", ((string)(null)), table5, "And ");
#line hidden
#line 48
 testRunner.When("we calculate the ballot results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 49
 testRunner.Then("the results are not given", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A candidate wins on second round")]
        public virtual void ACandidateWinsOnSecondRound()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A candidate wins on second round", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 52
 testRunner.Given("a ballot starts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidate",
                            "Votes"});
                table6.AddRow(new string[] {
                            "Alice",
                            "25"});
                table6.AddRow(new string[] {
                            "Bob",
                            "30"});
                table6.AddRow(new string[] {
                            "Charlie",
                            "10"});
                table6.AddRow(new string[] {
                            "Foxtrot",
                            "15"});
                table6.AddRow(new string[] {
                            "Delta",
                            "20"});
#line 53
 testRunner.And("the votes are :", ((string)(null)), table6, "And ");
#line hidden
#line 60
 testRunner.Then("the ballot is on first round", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 61
 testRunner.Given("the ballot has ended", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 62
 testRunner.When("we calculate the ballot results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 63
 testRunner.Then("there is no winner", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidate",
                            "Votes",
                            "Percentage"});
                table7.AddRow(new string[] {
                            "Bob",
                            "30",
                            "30"});
                table7.AddRow(new string[] {
                            "Alice",
                            "25",
                            "25"});
                table7.AddRow(new string[] {
                            "Delta",
                            "20",
                            "20"});
                table7.AddRow(new string[] {
                            "Foxtrot",
                            "15",
                            "15"});
                table7.AddRow(new string[] {
                            "Charlie",
                            "10",
                            "10"});
#line 64
 testRunner.And("the results are :", ((string)(null)), table7, "And ");
#line hidden
#line 71
 testRunner.And("the ballot is on second round", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidate",
                            "Votes"});
                table8.AddRow(new string[] {
                            "Alice",
                            "30"});
                table8.AddRow(new string[] {
                            "Bob",
                            "70"});
#line 72
 testRunner.Given("the votes are :", ((string)(null)), table8, "Given ");
#line hidden
#line 76
    testRunner.And("the ballot has ended", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
 testRunner.When("we calculate the ballot results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 78
 testRunner.Then("the winner is Bob", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidate",
                            "Votes",
                            "Percentage"});
                table9.AddRow(new string[] {
                            "Alice",
                            "30",
                            "30"});
                table9.AddRow(new string[] {
                            "Bob",
                            "70",
                            "70"});
#line 79
 testRunner.And("the results are :", ((string)(null)), table9, "And ");
#line hidden
#line 83
    testRunner.And("no more round starts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equal results on second round")]
        public virtual void EqualResultsOnSecondRound()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equal results on second round", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 85
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 86
 testRunner.Given("a ballot starts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidate",
                            "Votes"});
                table10.AddRow(new string[] {
                            "Alice",
                            "25"});
                table10.AddRow(new string[] {
                            "Bob",
                            "30"});
                table10.AddRow(new string[] {
                            "Charlie",
                            "10"});
                table10.AddRow(new string[] {
                            "Foxtrot",
                            "15"});
                table10.AddRow(new string[] {
                            "Delta",
                            "20"});
#line 87
 testRunner.And("the votes are :", ((string)(null)), table10, "And ");
#line hidden
#line 94
 testRunner.Then("the ballot is on first round", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 95
 testRunner.Given("the ballot has ended", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 96
 testRunner.When("we calculate the ballot results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 97
 testRunner.Then("there is no winner", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidate",
                            "Votes",
                            "Percentage"});
                table11.AddRow(new string[] {
                            "Bob",
                            "30",
                            "30"});
                table11.AddRow(new string[] {
                            "Alice",
                            "25",
                            "25"});
                table11.AddRow(new string[] {
                            "Delta",
                            "20",
                            "20"});
                table11.AddRow(new string[] {
                            "Foxtrot",
                            "15",
                            "15"});
                table11.AddRow(new string[] {
                            "Charlie",
                            "10",
                            "10"});
#line 98
 testRunner.And("the results are :", ((string)(null)), table11, "And ");
#line hidden
#line 105
 testRunner.And("the ballot is on second round", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidate",
                            "Votes"});
                table12.AddRow(new string[] {
                            "Alice",
                            "50"});
                table12.AddRow(new string[] {
                            "Bob",
                            "50"});
#line 106
 testRunner.Given("the votes are :", ((string)(null)), table12, "Given ");
#line hidden
#line 110
 testRunner.And("the ballot has ended", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 111
 testRunner.When("we calculate the ballot results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 112
 testRunner.Then("there is no winner", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidate",
                            "Votes",
                            "Percentage"});
                table13.AddRow(new string[] {
                            "Alice",
                            "50",
                            "50"});
                table13.AddRow(new string[] {
                            "Bob",
                            "50",
                            "50"});
#line 113
 testRunner.And("the results are :", ((string)(null)), table13, "And ");
#line hidden
#line 117
 testRunner.And("no more round starts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equal results for second and third candidate on first round")]
        public virtual void EqualResultsForSecondAndThirdCandidateOnFirstRound()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equal results for second and third candidate on first round", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 119
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 120
 testRunner.Given("a ballot starts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidate",
                            "Votes"});
                table14.AddRow(new string[] {
                            "Alice",
                            "25"});
                table14.AddRow(new string[] {
                            "Bob",
                            "30"});
                table14.AddRow(new string[] {
                            "Charlie",
                            "10"});
                table14.AddRow(new string[] {
                            "Foxtrot",
                            "10"});
                table14.AddRow(new string[] {
                            "Delta",
                            "25"});
#line 121
 testRunner.And("the votes are :", ((string)(null)), table14, "And ");
#line hidden
#line 128
 testRunner.Then("the ballot is on first round", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 129
 testRunner.Given("the ballot has ended", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 130
 testRunner.When("we calculate the ballot results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 131
 testRunner.Then("there is no winner", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Candidate",
                            "Votes",
                            "Percentage"});
                table15.AddRow(new string[] {
                            "Bob",
                            "30",
                            "30"});
                table15.AddRow(new string[] {
                            "Alice",
                            "25",
                            "25"});
                table15.AddRow(new string[] {
                            "Delta",
                            "25",
                            "25"});
                table15.AddRow(new string[] {
                            "Foxtrot",
                            "10",
                            "10"});
                table15.AddRow(new string[] {
                            "Charlie",
                            "10",
                            "10"});
#line 132
 testRunner.And("the results are :", ((string)(null)), table15, "And ");
#line hidden
#line 139
 testRunner.And("the ballot is on second round", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 140
 testRunner.And("the three candidates are qualified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
